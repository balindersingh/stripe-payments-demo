@{
ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Stripe</h1>
    <p>Capture card details for future use</p>

</div>

<div class="row">
    <div class="col-md-8">
        <div class="col-md-12 mt-5">
            <input type="textbox" required id="CardFullName" class="form-control mb-4" placeholder="Name on card">
            <input type="textbox" required id="emailfield" class="form-control mb-4" placeholder="Email">


    
            <select id="MethodType" class="form-select form-control mb-4" aria-label="Select card type">
                <option selected value="card">Credit Card</option>
                <option value="us_bank_account">ACH debit</option>
                <option value="acss_debit">ACSS debit</option>
            </select>
            <button class="btn btn-primary btn-block" onclick="createCustomerAndLoadForm();" type="submit">Setup Customer</button>

        </div>
        <div class="col-md-12 mt-5">
            <input type="textbox" required id="CustomerId" class="form-control mb-4" placeholder="Customer Id">
            <button class="btn btn-primary btn-block" onclick="chargeCustomer();" type="submit">Charge Customer</button>

        </div>
        <div class="col-md-12 mt-5">
            <form id="payment-form">
                <div id="payment-element">
                    <!-- Elements will create form elements here -->
                </div>
                <button type="submit" onclick="submitForm();" id="submit">Submit</button>
                <div id="error-message">
                    <!-- Display error message to your customers here -->
                </div>
            </form>
        </div>
        
    </div>
    <div class="col-md-4">
        <div class="alert alert-primary" role="alert">
            <p>Test card: 4242424242424242</p>
            <hr />
            <p>3D Secure Test card: 4000000000003220</p>
            <span class="badge badge-light">always require authentication</span>
            <hr />
            <p>3D Secure Test card:4000002500003155 </p>
            <span class="badge badge-light">only require authentication on intial setup</span>
        </div>
    </div>
</div>
<div class="text-center">
    <div id="message"></div>
</div>
<div id="paymentDialog" style="display:none;" title="Payment confirmation">
    <div id="setupCompleteContainer"></div>

</div>
<script>
    function renderStripeUI(redirectUrl) {
        var iframe = document.createElement('iframe');
        iframe.src = redirectUrl; //paymentIntent.next_action.redirect_to_url.url;
        iframe.width = 600;
        iframe.height = 400;
        $('#setupCompleteContainer').html(iframe);
        $("#paymentDialog").dialog();
    }
    // Set your publishable key: remember to change this to your live publishable key in production
    // See your keys here: https://dashboard.stripe.com/apikeys
    const stripe = Stripe('pk_test_51GvxM1IkwjzpyJ7wgAWCxc1UDEsvL8O5xGbkXm7R623hssinpHv4PajeYeEVXHctKTSVDP9uliSymLKALL4c9Key00K06pMeYK');
    //loadSecret();
    let baseUrl = '';
    let clientSecret;
    let stripeElement;
    let paymentElement;
    function loadSecret() {
        (async () => {
            const response = await fetch('/api/stripe/getSecret');
            let responseJson = await response.json();
            baseUrl = responseJson.redirectUrl;
           loadPaymentElements(responseJson.setupIntentResponse.clientSecret);
            // Render the form using the clientSecret
        })();
    }
    function createCustomerAndLoadForm() {
        let paymentMethodType = $("#MethodType").val();
        console.log('paymentMethodType', paymentMethodType);
        var customerObj = {
            customerName: $("#CardFullName").val(),
            paymentMethodType : $("#MethodType").val()
        }
        $.ajax({
            url: '/api/stripe/getSecret/',
            type: 'post',
            dataType: 'json',
            contentType: 'application/json',
            success: function (data) {
                $('#message').html('');
                console.log('createCustomerAndLoadForm',data);
                var responseInfo = data; //JSON.parse(data);
                baseUrl = responseInfo.redirectUrl;
                loadPaymentElements(responseInfo.setupIntentResponse.clientSecret);                
            },
            error: function (res) {
                console.log('Something went wrong:'+res.statusText);
            },
            data: JSON.stringify(customerObj)
        });
    }
    async function loadPaymentElements(client_secret) {
        const customerName = $('#CardFullName').val();
        const emailField = $('#emailfield').val();
        let paymentMethodType = $("#MethodType").val();
        if (paymentMethodType=="card") {
            clientSecret = client_secret;
            const options = {
                clientSecret: clientSecret,
                // Fully customizable with appearance API.
                appearance: {/*...*/ },
            };

            // Set up Stripe.js and Elements to use in checkout form, passing the client secret obtained in step 3
            stripeElement = stripe.elements(options);

            // Create and mount the Payment Element
            paymentElement = stripeElement.create('payment');
            paymentElement.mount('#payment-element');
        } else if (paymentMethodType =="us_bank_account") {
            await loadACHForm(client_secret,customerName,emailField);
        } else if (paymentMethodType == "acss_debit"){
            await loadACSSDebit(client_secret,customerName,emailField);
        }
    }
    function submitForm(){
        const form = document.getElementById('payment-form');
         console.log('submitForm log 1');
        form.addEventListener('submit', async (event) => {
            event.preventDefault();
            console.log('submitForm log 2 baseUrl:',baseUrl);
            const elements = stripeElement;//.getElement('card');
            const { error } = await stripe.confirmSetup({
                //`Elements` instance that was used to create the Payment Element
                elements,
                confirmParams: {
                    return_url: baseUrl+'/Home/SetupComplete',
                }
            });

            if (error) {
                console.log('submitForm error:',error);
                // This point will only be reached if there is an immediate error when
                // confirming the payment. Show error to your customer (for example, payment
                // details incomplete)
                const messageContainer = document.querySelector('#error-message');
                messageContainer.textContent = error.message;
            } else {
                console.log('submitForm succes render setupcomplete page');
                // renderStripeUI(baseUrl+'/Home/SetupComplete');
                // Your customer will be redirected to your `return_url`. For some payment
                // methods like iDEAL, your customer will be redirected to an intermediate
                // site first to authorize the payment, then redirected to the `return_url`.
            }
        });
    }

    function showMessage(message) {

        const messageContainer = document.querySelector('#error-message');
        if (message) {
            messageContainer.textContent = message;
        } else {
            messageContainer.textContent = '';
        }
    }

    async function loadACHForm(clientSecret, customerName, emailAddress) {
        

        // Calling this method will open the instant verification dialog.
        const {setupIntent, error} = await stripe.collectBankAccountForSetup({
            clientSecret: clientSecret,
            params: {
                payment_method_type: 'us_bank_account',
                payment_method_data: {
                    billing_details: {
                        name: customerName,
                        email: emailAddress,
                    },
                },
            },
            expand: ['payment_method'],
        });
                if (error) {
                    console.error(error.message);
                    showMessage('ERROR:'+error.message);
                    // PaymentMethod collection failed for some reason.
                } else if (setupIntent.status === 'requires_payment_method') {
                    showMessage('requires_payment_method');
                    // Customer canceled the hosted verification modal. Present them with other
                    // payment method type options.
                } else if (setupIntent.status === 'requires_confirmation') {
                    // We collected an account - possibly instantly verified, but possibly
                    // manually-entered. Display payment method details and mandate text
                    // to the customer and confirm the intent once they accept
                    // the mandate.
                    showMessage('requires_confirmation');
                   // confirmationForm.show();
                }
            
    }
    async function loadACSSDebit(clientSecret, customerName, emailAddress){
        const {setupIntent, error} = await stripe.confirmAcssDebitSetup(
            clientSecret,
            {
            payment_method: {
                billing_details: {
                name: customerName,
                email: emailAddress,
                },
            },
            }
        );

        if (error) {
            // Inform the customer that there was an error.
            console.log(error.message);
        } else {
            // Handle next step based on SetupIntent's status.
            console.log("SetupIntent ID: " + setupIntent.id);
            console.log("SetupIntent status: " + setupIntent.status);
        }
    }
    function chargeCustomer() {
        var customerObj = {
            customerId: $("#CustomerId").val(),
            paymentMethodType : $("#MethodType").val()
        }
        $.ajax({
            url: '/api/stripe/chargeCustomer/',
            type: 'post',
            dataType: 'json',
            contentType: 'application/json',
            success: function (data) {
                $('#message').html('');
                console.log('chargeCustomer', data);
                var responseInfo = data; //JSON.parse(data);
                $('#message').html(responseInfo.response);
            },
            error: function (res) {
                console.log('Something went wrong:' + res.statusText);
            },
            data: JSON.stringify(customerObj)
        });
    }
</script>